version: 2.1

orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@2.0.3
  sonarcloud: sonarsource/sonarcloud@1.0.3
  kubernetes: circleci/kubernetes@1.3.1
  codecov: codecov/codecov@1.0.2
  aws-eks: circleci/aws-eks@2.2.0

commands:
            
jobs:
  build-customer-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [customer-service-build]
      - run:
          name: Build front-end
          command: |
            cd customer-service
            npm install
            npm run build
      - save_cache:
          paths: [customer-service/node_modules]
          key: customer-service-build
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1 

  build-order-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [order-service-build]
      - run:
          name: build-order-service
          command: |
            cd order-service
            npm install
            npm run build
      - save_cache:
          paths: [order-service/node_modules]
          key: order-service-build
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1 

  build-payment-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [payment-service-build]
      - run:
          name: Build-payment-service
          command: |
            cd payment-service
            npm install
            npm run build
      - save_cache:
          paths: [payment-service/node_modules]
          key: payment-service-build
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1 

  build-product-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [product-service-build]
      - run:
          name: product-service build
          command: |
            cd product-service
            npm install
            npm run build
      - save_cache:
          paths: [product-service/node_modules]
          key: product-service-build
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          mentions: '@DevelopmentTeam'
          template: basic_success_1 


  test-customer-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-customer-service]
      - run:
          name: customer-service test
          command: |
            cd customer-service
            npm install
            npm run test
        # we can use npm package or third party service below for this test.
      - codecov/upload:
          file: {{ ~/customer-service/ }}
      - save_cache:
          paths: [customer-service/node_modules]
          key: test-customer-service
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      #- slack/notify:
       #   event: pass
        #  mentions: '@DevelopmentTeam'
        #  template: basic_success_1 
                
  test-order-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-order-service]
      - run:
          name: order-service test
          command: |
            cd order-service
            npm install
            npm run test
         # we can use npm package or third part service below for this test.
      - codecov/upload:
          file: {{ ~/order-service/ }}
      - save_cache:
          paths: [order-service/node_modules]
          key: test-order-service
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      #- slack/notify:
       #   event: pass
         # mentions: '@DevelopmentTeam'
         # template: basic_success_1 

    test-payment-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-payment-service]
      - run:
          name: payment-service test
          command: |
            cd payment-service
            npm install
            npm run test
         # we can use npm package or third part service below for this test.
      - codecov/upload:
          file: {{ ~/payment-service/ }}
      - save_cache:
          paths: [payment-service/node_modules]
          key: test-payment-service
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      #- slack/notify:
       #   event: pass
         # mentions: '@DevelopmentTeam'
         # template: basic_success_1 

    test-product-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-product-service]
      - run:
          name: product-service test
          command: |
            cd product-service
            npm install
            npm run test
         # we can use npm package or third part service below for this test.
      - codecov/upload:
          file: {{ ~/product-service/ }}
      - save_cache:
          paths: [product-service/node_modules]
          key: test-product-service
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      #- slack/notify:
       #   event: pass
         # mentions: '@DevelopmentTeam'
         # template: basic_success_1 

  scan-customer-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-customer-service]
      - run:
          name: Scan customer-service
          command: |
            cd customer-service
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
         # we can use npm package or third part service below for this static code analysis.
      - sonarcloud/scan:
          sonar_token_variable_name: SONAR_TOKEN
      - save_cache:
          paths: [customer-service/node_modules]
          key: scan-customer-service
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      #- slack/notify:
       #   event: pass
        #  mentions: '@DevelopmentTeam'
        #  template: basic_success_1 
      
  scan-order-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-order-service]
      - run:
          name: Scan order-service
          command: |
            cd order-service
            npm install
            npm audit fix --audit-level=critical --force
        # we can use npm package or third part service below for this static code analysis.
      - sonarcloud/scan:
          sonar_token_variable_name: SONAR_TOKEN
      - save_cache:
          paths: [order-service/node_modules]
          key: order-service-scan
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      #- slack/notify:
         # event: pass
         # mentions: '@DevelopmentTeam'
         # template: basic_success_1   

  scan-payment-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-payment-service]
      - run:
          name: Scan payment-service
          command: |
            cd payment-service
            npm install
            npm audit fix --audit-level=critical --force
        # we can use npm package or third part service below for this static code analysis.
      - sonarcloud/scan:
          sonar_token_variable_name: SONAR_TOKEN
      - save_cache:
          paths: [payment-service/node_modules]
          key: payment-service-scan
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      #- slack/notify:
         # event: pass
         # mentions: '@DevelopmentTeam'
         # template: basic_success_1 

  scan-product-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-product-service]
      - run:
          name: Scan product-service
          command: |
            cd product-service
            npm install
            npm audit fix --audit-level=critical --force
        # we can use npm package or third part service below for this static code analysis.
      - sonarcloud/scan:
          sonar_token_variable_name: SONAR_TOKEN
      - save_cache:
          paths: [product-service/node_modules]
          key: product-service-scan
      - slack/notify:
          event: fail
          mentions: '@DevelopmentTeam'
          template: basic_fail_1
      #- slack/notify:
         # event: pass
         # mentions: '@DevelopmentTeam'
         # template: basic_success_1   
      
  lint-dockerfiles:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout      
      - run:
          name: install hadolint
          command: |
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint                    
      - run:
          name: lint customer-service dockerfile
          command: |
            ./hadolint customer-service/Dockerfile               
      - run:
          name: lint order-service dockerfile
          command: |
            ./hadolint order-service/Dockerfile 
      - run:
          name: lint payment-service dockerfile
          command: |
            ./hadolint payment-service/Dockerfile 
      - run:
          name: lint product-service dockerfile
          command: |
            ./hadolint product-service/Dockerfile      
      - slack/notify:
          event: fail
          mentions: '@DevOpsTeam'
          template: basic_fail_1
      #- slack/notify:
        #  event: pass
        # mentions: '@DevOpsTeam'
        # template: basic_success_1 
       #- destroy-environment
      # Here's where you will add some code to rollback on failurrrre
       

  dockerize-services:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install dependencies(docker AND docker-compose)
          command: |
            sudo apt update
            sudo apt remove docker-desktop
            sudo rm -r $HOME/.docker/desktop
            sudo rm /usr/local/bin/com.docker.cli
            sudo apt purge docker-desktop
            sudo apt-get install ./docker-desktop-<version>-<arch>.deb
            systemctl --user start docker-desktop  
      - run:
          name:  build & push customer-service image
          command: |
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin 
            docker build --tag=customer-service ./customer-service
            docker tag customer-service:latest josephat/customer-service:${CIRCLE_WORKFLOW_ID:0:7}
            docker push josephat/customer-service:${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name:  build & push order-service image
          command: |
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin 
            docker build --tag=order-service ./order-service
            docker tag order-service:latest josephat/order-service:${CIRCLE_WORKFLOW_ID:0:7}
            docker push josephat/order-service:${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name:  build & push payment-service image
          command: |
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin 
            docker build --tag=payment-service ./payment-service
            docker tag payment-service:latest josephat/payment-service:${CIRCLE_WORKFLOW_ID:0:7}
            docker push josephat/payment-service:${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name:  build & push product-service image
          command: |
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin 
            docker build --tag=product-service ./product-service
            docker tag product-service:latest josephat/product-service:${CIRCLE_WORKFLOW_ID:0:7}
            docker push josephat/product-service:${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          mentions: '@DevOpsTeam'
          template: basic_fail_1
      #- slack/notify:
       #   event: pass
        #  mentions: '@DevOpsTeam'
         # template: basic_success_1      

  Deploy-containers:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install dependencies(docker, docker-compose, awscli and kubectl)
          command: |
            sudo apt update
            sudo apt remove docker-desktop
            sudo rm -r $HOME/.docker/desktop
            sudo rm /usr/local/bin/com.docker.cli
            sudo apt purge docker-desktop
            sudo apt-get install ./docker-desktop-<version>-<arch>.deb
            systemctl --user start docker-desktop

            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: authenticate to cluster and docker
          command: |
              aws eks --region ${REGION} update-kubeconfig --name ${cluster_name}
              echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin 
      - run:
          name: deploy customer-service 
          command: |
              kubectl apply -f ~/k8s/templates/customer-service-deploy.yml
      - run:
          name: deploy order-service 
          command: |
              kubectl apply -f ~/k8s/templates/order-service-deploy.yml
      - run:
          name: deploy payment-service 
          command: |
              kubectl apply -f ~/k8s/templates/payment-service-deploy.yml
      - run:
          name: deploy product-service 
          command: |
              kubectl apply -f ~/k8s/templates/product-service-deploy.yml      
      - run:
          name: deploy rabbitmq
          command: |
              kubectl apply -f ~/k8s/templates/rabbitmq.yml 
           
      - slack/notify:
          event: fail
          mentions: '@DevOpsTeam'
          template: basic_fail_1
      #- slack/notify:
        #  event: pass
        #  mentions: '@DevOpsTeam'
         # template: basic_success_1  

   


workflows:
  default:
    jobs:
      - build-customer-service
      - build-order-service
      - build-payment-service
      - build-product-service
      - test-customer-service:
          requires: [build-customer-service]
      - test-order-service:
          requires: [build-order-service]
      - test-payment-service:
          requires: [build-payment-service]
      - test-product-service:
          requires: [build-product-service]
      - scan-customer-service:
          requires: [build-customer-service]
      - scan-order-service:
          requires: [build-order-service]
      - scan-payment-service:
          requires: [build-payment-service]
      - scan-product-service:
          requires: [build-product-service]
      - lint-dockerfiles
      - dockerize-services:
          requires: [test-customer-service, scan-customer-service, test-order-service, scan-order-service, test-payment-service, scan-payment-service, test-product-service, scan-product-service]
          filters:
            branches:
              only: [master]
      - Deploy-containers:
          requires: [dockerize-services]
     